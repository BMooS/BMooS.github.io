<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BMooS</title>
  <icon>https://bmoos.github.io/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bmoos.github.io/"/>
  <updated>2020-04-19T13:55:05.173Z</updated>
  <id>https://bmoos.github.io/</id>
  
  <author>
    <name>BMooS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode题解289</title>
    <link href="https://bmoos.github.io/2020/04/19/LeetCode%E9%A2%98%E8%A7%A3289/"/>
    <id>https://bmoos.github.io/2020/04/19/LeetCode%E9%A2%98%E8%A7%A3289/</id>
    <published>2020-04-19T13:09:56.000Z</published>
    <updated>2020-04-19T13:55:05.173Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode题解&quot;&gt;&lt;a href=&quot;#LeetCode题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode题解&quot;&gt;&lt;/a&gt;LeetCode题解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;第289题 生命游戏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;，生命游戏，简称为生命，是英国数学家约翰·何顿·康威(老爷子前段时间因为新冠肺炎去世，唉，缅怀)在 1970 年发明的细胞自动机。&lt;/p&gt;
&lt;p&gt;给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；&lt;/li&gt;
&lt;li&gt;如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；&lt;/li&gt;
&lt;li&gt;如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；&lt;/li&gt;
&lt;li&gt;如果死细胞周围正好有三个活细胞，则该位置死细胞复活；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：&lt;br&gt;[&lt;br&gt;  [0,1,0],&lt;br&gt;  [0,0,1],&lt;br&gt;  [1,1,1],&lt;br&gt;  [0,0,0]&lt;br&gt;]&lt;br&gt;输出：&lt;br&gt;[&lt;br&gt;  [0,0,0],&lt;br&gt;  [1,0,1],&lt;br&gt;  [0,1,1],&lt;br&gt;  [0,1,0]&lt;br&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeetCode题解" scheme="https://bmoos.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="python" scheme="https://bmoos.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞</title>
    <link href="https://bmoos.github.io/2020/04/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>https://bmoos.github.io/2020/04/06/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-04-05T16:31:59.000Z</published>
    <updated>2020-04-19T13:05:38.259Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;（冲冲冲，继续学习。）&lt;/p&gt;
&lt;p&gt;什么是文件包含漏洞？&lt;/p&gt;
&lt;p&gt;服务器通过PHP的特性去包含任意文件时，对文件来源过滤不严，从而可以包含一个恶意文件。&lt;/p&gt;
&lt;p&gt;简要来说，服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间，但是如果这个包含的文件是变量或者用户可以篡改的，且开发人员过滤不严，那么就有可能包含一个恶意文件，导致服务器遭到侵害。&lt;/p&gt;
&lt;p&gt;（注意：文件包含不止在PHP中，只是PHP比较严重而已，其他脚本语言例如JSP，ASP也有文件包含漏洞）&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://bmoos.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="文件包含漏洞" scheme="https://bmoos.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="https://bmoos.github.io/2020/04/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>https://bmoos.github.io/2020/04/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-04-01T04:23:14.000Z</published>
    <updated>2020-04-04T14:30:25.353Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;什么是文件上传？&lt;/p&gt;
&lt;p&gt;将客户端数据以文件形式封装，通过网络协议发送到服务端，保存在服务端中，在硬盘上作为真实文件形式进行保存。&lt;/p&gt;
&lt;p&gt;文件上传功能本身没有问题，是正常的业务需求，但有问题的是文件上传后，服务器怎么处理，解释文件，这样就造就了文件上传漏洞(file up load vulnerability)&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://bmoos.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="文件上传漏洞" scheme="https://bmoos.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="https://bmoos.github.io/2020/03/21/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://bmoos.github.io/2020/03/21/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-03-21T06:36:20.000Z</published>
    <updated>2020-03-28T08:07:25.830Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        SQL注入漏洞是目前web安全中最为高危漏洞之一，在OWASP常年排名第一(截至2020.3.21)，也是最为常见的漏洞之一，虽然随着开发人员安全意识的提高和开发工程的模板化，SQL注入不再像以前那么随处可见且没有任何防护，但是渗透技术也日趋复杂多样，而且提供web服务的企业太多了，并不是每一个企业的web服务都具有良好的安全防护措施，所以SQL注入目前还是渗透人员必须所具备的能力之一。&lt;/p&gt;
&lt;p&gt;​        对大多数数据库而言，SQL注入的原理是类似的，因为每个SQL数据库都要一定的遵守SQL语法，但它们之间存在一些差异，本文章因为技术有限，使用市面上常用的SQL数据库——MySQL数据库进行举例说明，但疏通同归，攻击者对数据库的注入，其利用方式也是类似的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询数据&lt;/li&gt;
&lt;li&gt;读写文件&lt;/li&gt;
&lt;li&gt;执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​        在权限允许的情况下，通常数据库都支持以上三种操作，而且攻击者的最终目的也是以上三种，只不过不同数据库注入的SQL语句不一样而已。&lt;/p&gt;
&lt;p&gt;​        通常的SQL注入可以使用工具，比如SQLmap，其内置了很多功能，全面而强大，但是还是要掌握一些手动注入的方式，才能真正了解SQL注入。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://bmoos.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="SQL注入" scheme="https://bmoos.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>小工具-我的博客查看脚本</title>
    <link href="https://bmoos.github.io/2020/03/18/%E5%B0%8F%E5%B7%A5%E5%85%B7-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC/"/>
    <id>https://bmoos.github.io/2020/03/18/%E5%B0%8F%E5%B7%A5%E5%85%B7-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC/</id>
    <published>2020-03-18T13:18:44.000Z</published>
    <updated>2020-03-18T13:43:33.271Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        这段时间在学习正则，学完总想拿来实践一下，转头想了想，干起了老本行——爬虫，虽然之前写爬虫的时候也用到了正则，但是都是知其然不知其所以然，也好久没有过python写代码了，随便写了写脚本，之后也会写一些渗透用的脚本(poc或者exp)，这些都会放到杂项分类里面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂项" scheme="https://bmoos.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="python" scheme="https://bmoos.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://bmoos.github.io/2020/03/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://bmoos.github.io/2020/03/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-03-17T11:00:20.000Z</published>
    <updated>2020-03-17T17:25:26.229Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​        正则表达式(Regular Expression)是一种&lt;strong&gt;文本模式&lt;/strong&gt;，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。&lt;/p&gt;
&lt;p&gt;​        正则表达式使用单个字符串来描述、匹配一系列匹配某个&lt;strong&gt;句法规则&lt;/strong&gt;的字符串。&lt;/p&gt;
&lt;p&gt;​        学习正则可以提高效率，而且现在大多语言都支持正则，之前因为觉得正则太复杂而放弃，现在有了大把时间可以重新学习一下。。。&lt;/p&gt;
&lt;p&gt;​        注意：本文只是对正则入门级操作，复杂多样的正则不涉及(PS：太难了QAQ)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具使用" scheme="https://bmoos.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="python" scheme="https://bmoos.github.io/tags/python/"/>
    
      <category term="正则表达式" scheme="https://bmoos.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="https://bmoos.github.io/2020/03/10/git%E4%BD%BF%E7%94%A8/"/>
    <id>https://bmoos.github.io/2020/03/10/git%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-09T16:35:22.000Z</published>
    <updated>2020-03-11T06:24:23.867Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​        git是一个开源的分布式版本控制系统，它能帮助你管理不同的版本，并且随时退回到任意时刻，而且也可以协同开发。之前也学过一点git，不过那阵用不到git，而且学的也比较琐碎难以理解，现在在我有一定基础的情况下，重新学习git，写下这份博客用以记录学习内容。Git指令繁多，但是常用的就十几条，下述介绍的指令掌握了足以应对常规使用，新的指令也会慢慢学习记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具使用" scheme="https://bmoos.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="git" scheme="https://bmoos.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>XSS跨站脚本漏洞</title>
    <link href="https://bmoos.github.io/2020/03/03/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%BC%8F%E6%B4%9E/"/>
    <id>https://bmoos.github.io/2020/03/03/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-03-03T15:14:24.000Z</published>
    <updated>2020-03-05T16:29:46.623Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        XSS(cross site scripting)即跨站脚本攻击，是最常见的web应用程序漏洞之一。&lt;/p&gt;
&lt;p&gt;​        XSS是指攻击者在网页嵌入客户端脚本，通常使用的是JavaScript编写的恶意代码，当用户浏览网页时，恶意代码将在用户的浏览器上执行。&lt;/p&gt;
&lt;p&gt;​        XSS属于前端漏洞，受害者是用户，但是网站的管理人员也是用户之一，也有可能被攻击者拿到管理员权限，作为跳板实施攻击。&lt;/p&gt;
&lt;p&gt;​        本篇文章用于对XSS原理解析和对各种类型的XSS介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://bmoos.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="XSS" scheme="https://bmoos.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>DNS服务以及DNS域传送漏洞</title>
    <link href="https://bmoos.github.io/2020/03/01/DNS%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8ADNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E/"/>
    <id>https://bmoos.github.io/2020/03/01/DNS%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8ADNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-02-29T16:04:10.000Z</published>
    <updated>2020-03-18T09:45:43.339Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        疫情影响，宅在家里，开学推迟，要上网课，有课名叫，网络攻防，要上实验，网上靶机，可是靶机，实在不行，自己搭建，两眼蒙蔽，从头做起，选择放弃。(哭)&lt;/p&gt;
&lt;p&gt;​        这次要做的实验内容和DNS域传送漏洞有关，其实也是用工具进行信息收集，之前忽略了信息收集这块，觉得不太重要，但是现在回头来看，这是最重要的一部分，自己也回头补补。DNS域名查询也很重要，要不渗透前都不知道目标是谁。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://bmoos.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="DNS" scheme="https://bmoos.github.io/tags/DNS/"/>
    
      <category term="DNS域传送漏洞" scheme="https://bmoos.github.io/tags/DNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>kali-19.4汉化以及伪装win10界面</title>
    <link href="https://bmoos.github.io/2020/02/28/kali-19-4%E6%B1%89%E5%8C%96%E4%BB%A5%E5%8F%8A%E4%BC%AA%E8%A3%85win10%E7%95%8C%E9%9D%A2/"/>
    <id>https://bmoos.github.io/2020/02/28/kali-19-4%E6%B1%89%E5%8C%96%E4%BB%A5%E5%8F%8A%E4%BC%AA%E8%A3%85win10%E7%95%8C%E9%9D%A2/</id>
    <published>2020-02-28T13:36:55.000Z</published>
    <updated>2020-03-18T09:46:13.242Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        之前用虚拟机做实验的时候汉化过一次，后来文件被删了(都是自己手贱)，现在又要因为实验要求重新下载一次，但是忘记kali的汉化过程，这次特意记录一下。我用的是kali-2019.4版本，这个版本新上线了一个可以伪装成Windows10的功能，也挺有意思的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://bmoos.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="kali" scheme="https://bmoos.github.io/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试实战--家用电脑</title>
    <link href="https://bmoos.github.io/2020/02/23/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98-%E5%AE%B6%E7%94%A8%E7%94%B5%E8%84%91/"/>
    <id>https://bmoos.github.io/2020/02/23/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98-%E5%AE%B6%E7%94%A8%E7%94%B5%E8%84%91/</id>
    <published>2020-02-23T05:57:52.000Z</published>
    <updated>2020-04-10T15:37:50.255Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        因为疫情的影响导致现在还没有开学，在家里呆的有些无聊，最近也在学习渗透方面的知识，但是关于渗透测试，纸上得来终觉浅，绝知此事要躬行，还是要得累计实战经验，所以我就把目标转向了我家的家用台式电脑，就想把之前学习理解到的简单实现一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://bmoos.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="文件上传漏洞" scheme="https://bmoos.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="webshell" scheme="https://bmoos.github.io/tags/webshell/"/>
    
  </entry>
  
  <entry>
    <title>浏览器安全</title>
    <link href="https://bmoos.github.io/2020/02/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/"/>
    <id>https://bmoos.github.io/2020/02/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8/</id>
    <published>2020-02-18T04:00:07.000Z</published>
    <updated>2020-03-12T17:32:17.365Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器安全&quot;&gt;&lt;a href=&quot;#浏览器安全&quot; class=&quot;headerlink&quot; title=&quot;浏览器安全&quot;&gt;&lt;/a&gt;浏览器安全&lt;/h1&gt;&lt;p&gt;​        浏览器的安全策略有很多，比如同源策略，csp，cookie设置，以及浏览器沙箱等，都是游览器安全策略的内容。本文用于记录和理解这些设施，随时扩充，不断学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://bmoos.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="同源策略" scheme="https://bmoos.github.io/tags/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    
      <category term="内容安全策略" scheme="https://bmoos.github.io/tags/%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>VPN相关设置-shadowsocksR</title>
    <link href="https://bmoos.github.io/2020/02/14/VPN%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE-shadowsocksR/"/>
    <id>https://bmoos.github.io/2020/02/14/VPN%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE-shadowsocksR/</id>
    <published>2020-02-14T04:53:16.000Z</published>
    <updated>2020-02-16T10:39:41.846Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        之前一直用的my2one的服务器代理，pc和移动端也用的ShadowsocksR，也就是SSR，一些设置之前也是用的my2one给的教程，一直没手动设置过，现在想用用TOR游览器，不过开始之前先把VPN设置好，别暴露了自己的IP和位置。&lt;/p&gt;
&lt;p&gt;（更新：使用tor游览器访问暗网）&lt;/p&gt;
    
    </summary>
    
    
      <category term="相关配置" scheme="https://bmoos.github.io/categories/%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="VPN" scheme="https://bmoos.github.io/tags/VPN/"/>
    
      <category term="ShadowsocksR" scheme="https://bmoos.github.io/tags/ShadowsocksR/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题更新</title>
    <link href="https://bmoos.github.io/2020/02/13/hexo-next%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0/"/>
    <id>https://bmoos.github.io/2020/02/13/hexo-next%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0/</id>
    <published>2020-02-13T13:16:01.000Z</published>
    <updated>2020-02-13T16:47:47.779Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo-next主题更新&quot;&gt;&lt;a href=&quot;#hexo-next主题更新&quot; class=&quot;headerlink&quot; title=&quot;hexo next主题更新&quot;&gt;&lt;/a&gt;hexo next主题更新&lt;/h1&gt;&lt;p&gt;next主题设置文档链接：&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://theme-next.iissnan.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​        因为我之前用hexo搭建个人博客的时候一直使用的是next主题，不过在最近的一次next主题配置设置的时候，发现配置文件_config.YML中有很多我没有的选项，结果发现我的next版本是5.1.4，现在我要将它更新到7.4。&lt;/p&gt;
&lt;p&gt;​        想着next主题更新的话，顺便也可以更新下hexo，但是发现我就是当前最新版4.2.0，那就只更新一下next就行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="相关配置" scheme="https://bmoos.github.io/categories/%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hexo" scheme="https://bmoos.github.io/tags/hexo/"/>
    
      <category term="next主题" scheme="https://bmoos.github.io/tags/next%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo相关问题</title>
    <link href="https://bmoos.github.io/2020/02/13/hexo%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://bmoos.github.io/2020/02/13/hexo%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-13T06:03:02.000Z</published>
    <updated>2020-02-13T16:45:11.420Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;hexo&quot;&gt;&lt;/a&gt;hexo&lt;/h1&gt;&lt;p&gt;hexo中文文档链接：&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/zh-cn/docs/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="相关配置" scheme="https://bmoos.github.io/categories/%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hexo" scheme="https://bmoos.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>堆栈和队列</title>
    <link href="https://bmoos.github.io/2020/02/12/%E5%A0%86%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://bmoos.github.io/2020/02/12/%E5%A0%86%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2020-02-12T11:16:09.000Z</published>
    <updated>2020-02-13T16:45:05.047Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        堆栈和队列都是比较基本的数据结构，也是程序员应该掌握的结构，它们简单而又有用，以此，记录一下学习过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://bmoos.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c语言" scheme="https://bmoos.github.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="堆栈" scheme="https://bmoos.github.io/tags/%E5%A0%86%E6%A0%88/"/>
    
      <category term="队列" scheme="https://bmoos.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="https://bmoos.github.io/2020/02/06/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>https://bmoos.github.io/2020/02/06/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2020-02-05T16:16:34.000Z</published>
    <updated>2020-02-13T16:45:32.217Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;树的递归定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;树是一种数据结构，它要么为空，要么具有一个值并具有零个或多个&lt;strong&gt;孩子&lt;/strong&gt;，每个孩子本身也是一个树。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://bmoos.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="c语言" scheme="https://bmoos.github.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="二叉搜索树" scheme="https://bmoos.github.io/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode题解5</title>
    <link href="https://bmoos.github.io/2020/01/31/LeetCode%E9%A2%98%E8%A7%A35/"/>
    <id>https://bmoos.github.io/2020/01/31/LeetCode%E9%A2%98%E8%A7%A35/</id>
    <published>2020-01-31T06:25:00.000Z</published>
    <updated>2020-02-13T16:46:56.112Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode题解&quot;&gt;&lt;a href=&quot;#LeetCode题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode题解&quot;&gt;&lt;/a&gt;LeetCode题解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;第5题，最长回文子串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入: “babad”&lt;br&gt;输出: “bab”&lt;br&gt;注意: “aba” 也是一个有效答案。&lt;/p&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;p&gt;输入: “cbbd”&lt;br&gt;输出: “bb”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeetCode题解" scheme="https://bmoos.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="python" scheme="https://bmoos.github.io/tags/python/"/>
    
      <category term="c语言" scheme="https://bmoos.github.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode题解4</title>
    <link href="https://bmoos.github.io/2020/01/30/LeetCode%E9%A2%98%E8%A7%A34/"/>
    <id>https://bmoos.github.io/2020/01/30/LeetCode%E9%A2%98%E8%A7%A34/</id>
    <published>2020-01-29T16:06:26.000Z</published>
    <updated>2020-02-13T16:46:49.826Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode题解&quot;&gt;&lt;a href=&quot;#LeetCode题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode题解&quot;&gt;&lt;/a&gt;LeetCode题解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;第4题，寻找两个有序数组的中位数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。&lt;/p&gt;
&lt;p&gt;请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 &lt;strong&gt;O(log(m + n))&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以假设 nums1 和 nums2 不会同时为空。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;nums1 = [1, 3]&lt;br&gt;nums2 = [2]&lt;/p&gt;
&lt;p&gt;则中位数是 2.0&lt;/p&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;p&gt;nums1 = [1, 2]&lt;br&gt;nums2 = [3, 4]&lt;/p&gt;
&lt;p&gt;则中位数是 (2 + 3)/2 = 2.5&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeetCode题解" scheme="https://bmoos.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="python" scheme="https://bmoos.github.io/tags/python/"/>
    
      <category term="c语言" scheme="https://bmoos.github.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode题解3</title>
    <link href="https://bmoos.github.io/2020/01/27/LeetCode%E9%A2%98%E8%A7%A33/"/>
    <id>https://bmoos.github.io/2020/01/27/LeetCode%E9%A2%98%E8%A7%A33/</id>
    <published>2020-01-27T13:52:11.000Z</published>
    <updated>2020-02-13T16:46:42.868Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeetCode题解&quot;&gt;&lt;a href=&quot;#LeetCode题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode题解&quot;&gt;&lt;/a&gt;LeetCode题解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;第3题，无重复字符的最长字串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: “abcabcbb”&lt;br&gt;输出: 3&lt;br&gt;解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。&lt;/p&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;p&gt;输入: “bbbbb”&lt;br&gt;输出: 1&lt;br&gt;解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。&lt;/p&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;p&gt;输入: “pwwkew”&lt;br&gt;输出: 3&lt;br&gt;解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。&lt;br&gt;请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeetCode题解" scheme="https://bmoos.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="python" scheme="https://bmoos.github.io/tags/python/"/>
    
      <category term="c语言" scheme="https://bmoos.github.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
